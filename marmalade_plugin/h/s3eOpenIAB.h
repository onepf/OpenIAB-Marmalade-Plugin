/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_OPENIAB_H
#define S3E_EXT_OPENIAB_H

#include "s3eTypes.h"

/**
 * @addtogroup s3egroup
 * @{
 */

/**
 * @defgroup openiabgroup S3E OpenIAB API reference
 *
 * Provides an API for making in-app purchases through the Google Play store V3 interface
 * for different stores.
 *
 * @supported
 * - android
 *
 * @platnote This API is for Android only. For the equivalent in-app billing
 * API for iOS, see "S3E iOS App Store Billing".
 *
 *
 * TODO: implement for iOS
 *
 * TODO: add reference to the documentation
 */

/**
 * @}
 * @addtogroup openiabgroup
 * @{
 */
 
 /**
 *  OpenIAB callbacks
 *	Note In Marmalade all callbacks are queued up and trigger after the next s3eDeviceYield()
 *	
 *	Your callback needs to be of the form int32 MyCallback(void *systemData,void *userData)
 *  systemData is data from the store and needs to be cast to the appropriate structure - see the "systemdata points to" comments below.
 *	userData is specified when you register the callback, it is simply passed back to your callback and could be used to help the callback identify context (eg. it could be a pointer to a class you need to pass the data to)
 *  You register the callback using eg. s3eOpenIabRegister(S3E_OPENIAB_PURCHASE_CALLBACK, myPurchaseCallback, this);
 *	The return value is always ignored.
 */

enum s3eOpenIabCallback
{
     /**
     * Called when a purchase attempt completes with an outcome. 
	 * @see s3eOpenIabRequestPurchase.
	 * If the purchase was successful and was for a consumable good, you *MUST* now call s3eOpenIabConsumeItem or the item will not be available for purchase again.
     * systemdata points to a s3eOpenIabPurchaseResponse
	 * @see s3eOpenIabPurchaseResponse
     */
    S3E_OPENIAB_PURCHASE_CALLBACK,
	
	/**
	* Called with a list of products that are availabe in the store.
	* @see s3eOpenIabRequestProductInformation
	* systtemdata points to a s3eOpenIabSkuResponse
	* @see s3eOpenIabSkuResponse
	*/
	
	S3E_OPENIAB_LIST_PRODUCTS_CALLBACK,
	
	/** Called with a list of products the user has previously purchased.
	* @see 3eOpenIabRestoreTransactions
	* systemdata points to a s3eOpenIabRestoreResponse
	* @see s3eOpenIabRestoreResponse
	*/
	
	S3E_OPENIAB_RESTORE_CALLBACK,
	
	/**
	* Called with the result of a Consume request. 
	* @see s3eOpenIabConsumeItem
	* systemdata points to a s3eOpenIabConsumeResponse
	* @see s3eOpenIabConsumeResponse
	*/
	S3E_OPENIAB_CONSUME_CALLBACK,

    /**
     * The number of in-app billing callbacks. Required by S3E.
     */
    S3E_OPENIAB_CALLBACK_MAX
};

/**
 * The possible error codes from s3eOpenIab functions, these error codes are used across all the callbacks
 */
enum s3eOpenIabResult
{
    /** Success */
    S3E_OPENIAB_RESULT_OK = 0,

    /** User pressed back or cancelled a dialog */
    S3E_OPENIAB_RESULT_USER_CANCELED = 1,

    /** This billing API version is not supported for the type requested */
    S3E_OPENIAB_RESULT_BILLING_UNAVAILABLE = 3,

    /** Requested product is not available for purchase  */
    S3E_OPENIAB_RESULT_ITEM_UNAVAILABLE = 4,

    /** Invalid arguments provided to the API. This error can also indicate that the application was not correctly signed or properly set up for In-app Billing in Google Play, or does not have the necessary permissions in its manifest */
    S3E_OPENIAB_RESULT_DEVELOPER_ERROR = 5,

    /** Fatal error during the API action */
    S3E_OPENIAB_RESULT_ERROR = 6,

    /** Failure to purchase since item is already owned - make sure you called s3eOpenIabConsumeItem */
    S3E_OPENIAB_RESULT_ITEM_ALREADY_OWNED = 7,

    /** Failure to consume since item is not owned */
    S3E_OPENIAB_RESULT_ITEM_NOT_OWNED = 8,
	
	/** Set of error conditions internal to the extension  */
	
    S3E_OPENIAB_REMOTE_EXCEPTION = -1001,
	
    S3E_OPENIAB_BAD_RESPONSE = -1002,
	
	/** The security checks using your public certificate failed */
    S3E_OPENIAB_VERIFICATION_FAILED = -1003,
	
    S3E_OPENIAB_SEND_INTENT_FAILED = -1004,
	
    S3E_OPENIAB_USER_CANCELLED = -1005,
	
    S3E_OPENIAB_UNKNOWN_PURCHASE_RESPONSE = -1006,
	
    S3E_OPENIAB_MISSING_TOKEN = -1007,
	
    S3E_OPENIAB_UNKNOWN_ERROR = -1008,
	
    S3E_OPENIAB_SUBSCRIPTIONS_NOT_AVAILABLE = -1009,
	
    S3E_OPENIAB_INVALID_CONSUMPTION = -1010
};

/**
 * OpenIAB public keys verification mode
 */
enum s3eOpenIabVerifyMode
{
	/**
	 * Verify signatures in any store. 
	 * This is set by default in Google's IabHelper. Throws exception if key is not available or invalid.
	 * To prevent crashes OpenIAB wouldn't connect to OpenStore if no publicKey provided
	 */
	VERIFY_EVERYTHING = 0,

	/** Don't verify signatires. To perform verification on server-side */
	VERIFY_SKIP = 1,

	/** Verify signatures only if publicKey is available. Otherwise skip verification. */
	VERIFY_ONLY_KNOWN = 2
};

enum SamsungRequestCode
{
	REQUEST_CODE_IS_IAP_PAYMENT = 1,
	REQUEST_CODE_IS_ACCOUNT_CERTIFICATION = 899
};

/** OpenIAB options structure **/
struct s3eOpenIabOptions
{
	/** Wait specified amount of ms to find all OpenStores on device. 5000 by default */
	int m_DiscoveryTimeoutMs;
	
	/** 
	 * Check user inventory in every store to select proper store
	 * Will try to connect to each billingService and extract user's purchases.
	 * If purchases have been found in the only store that store will be used for further purchases. 
	 * If purchases have been found in multiple stores only such stores will be used for further elections    
	 */
	bool m_CheckInventory;
	
	/** Wait specified amount of ms to check inventory in all stores. 10000 by default */
	int m_CheckInventoryTimeoutMs;

	s3eOpenIabVerifyMode m_VerifyMode;
	
	/** Store 'public key' keys */
	const char** m_StoreNames;
	
	/** Store 'public key' values */
	const char** m_StoreKeys;
	
	int m_NumStores;
	
    /**
	 * Used as priority list if store that installed app is not found and there are 
     * multiple stores installed on device that supports billing.
     */
	const char** m_PrefferedStoreNames;
	
	int m_NumPrefferedStoreNames;

    /** 
     * Used for SamsungApps setup. Specify your own value if default one interfere your code.
     * default value is SamsungRequestCode::REQUEST_CODE_IS_ACCOUNT_CERTIFICATION
     */
	int m_SamsungCertificationRequestCode;
};

struct s3eOpenIabStoreNames
{
	char* m_GooglePlay;
	char* m_Amazon;
	char* m_Tizen;
	char* m_Samsung;
	char* m_AppStore;
};

/** Structure detailing a purchase that has been made, used in both s3eOpenIabPurchase and s3eOpenIabRestoreResponse */

struct s3eOpenIabPurchase
{
    /** A unique order identifier for the transaction. This corresponds to the Google Wallet Order ID. */
    char* m_OrderID;
    /** The application package from which the purchase originated. */
    char*    m_PackageID;
    /** The item's product identifier. Every item has a product ID, which you must specify in the application's product list on the Google Play Developer Console. */
    char*    m_ProductId;
    /** Time item was purchased. [since epoch, Jan 1st 1970] */
    unsigned int m_PurchaseTime;
    /** The purchase state of the order. Possible values are 0 (purchased), 1 (canceled), or 2 (refunded). */
    int		m_PurchaseState;
    /** A token that uniquely identifies a purchase for a given item and user pair.  */
    char*	m_PurchaseToken;
	/** A developer-specified string that contains supplemental information about an order. You can specify a value for this field when you make a s3eOpenIabRequestPurchase request. */
    char*	m_DeveloperPayload;
	/** The raw JSON string sent from Google */
	char*	m_JSON;
	/** The signature of the JSON string - this has already been checked by this extension, however you may want to perform additional checks */	
	char* 	m_Signature;
	
	char*   m_AppstoreName;
};

/**
 * Structure passed to your S3E_OPENIAB_PURCHASE_CALLBACK
 * @see s3eOpenIabRequestPurchase
 * @par Required Header Files
 * s3eOpenIab.h
 */

struct s3eOpenIabPurchaseResponse
{
	/** informational message to assist during development, may not be set, also see device logs */
	char *m_ErrorMsg;
	/** outcome of the purchase, if the result is S3E_OPENIAB_RESULT_OK then m_PurchaseDetails below will be be set */
	s3eOpenIabResult m_Status;

	/** Details of the purchase, will be null if purchase failed */
	s3eOpenIabPurchase *m_PurchaseDetails; 
};

/**
 * One of the available products listed in your shop, used in the s3eOpenIabSkuResponse
 */
struct s3eOpenIabItemInfo
{
	/** The product ID for the product. */
    char* 	m_ProductID;
	/** Value will be �inapp� for an in-app product or "subs" for subscription. */
	char* 	m_Type;
     /** Formatted price of the item, including its currency sign. The price does not include tax. e.g $5.00  */
    char*   m_Price;
	/** Title of the item. */
    char*	m_Title;
    /** Description of the product. */
    char*   m_Description;
};

/**
 * Structure passed to your S3E_OPENIAB_LIST_PRODUCTS_CALLBACK callback
 * @see s3eOpenIabRequestProductInformation
 * @par Required Header Files
 * s3eOpenIab.h
 */
struct s3eOpenIabSkuResponse
{
  	/** informational message to assist during development, may not be set, also see device logs */
	char *m_ErrorMsg;
	/** outcome of the purchase, if the result is S3E_OPENIAB_RESULT_OK then the fields below will be filled out */
	s3eOpenIabResult m_Status;
	
	/** The number of products in the m_Products array */
	int m_NumProducts;
	/** The array of products in this sku */
	s3eOpenIabItemInfo* m_Products;
};

/**
 * One of the purchased items, used in s3eOpenIabRestoreResponse
 */
struct s3eOpenIabPurchaseInfo
{
	/** Name of the sku this product came from */
	const char* m_Sku;
	/** details of the purchase made */
	s3eOpenIabPurchase m_PurchaseDetails;
};

/**
 * Structure passed to your S3E_OPENIAB_RESTORE_CALLBACK callback
 * @see 3eOpenIabRestoreTransactions
 * @par Required Header Files
 * s3eOpenIab.h
 */

struct s3eOpenIabRestoreResponse
{
  	/** informational message to assist during development, may not be set, also see device logs */
	char *m_ErrorMsg;
	/** outcome of the purchase, if the result is S3E_OPENIAB_RESULT_OK then the fields below will be filled out */
	s3eOpenIabResult m_Status;
	
	/** Number of purchases in the m_Purchases array */
	int m_NumPurchases;
	/** List of purchases */
	s3eOpenIabPurchase* m_Purchases;
};

/**
 * Structure passed to your S3E_OPENIAB_CONSUME_CALLBACK callback
 * @see s3eOpenIabConsumeItem
 * @par Required Header Files
 * s3eOpenIab.h
 */

struct s3eOpenIabConsumeResponse
{
  	/** informational message to assist during development, may not be set, also see device logs */
	char *m_ErrorMsg;
	/** outcome of the consumption request, if the result is S3E_OPENIAB_RESULT_OK then the consume request succeeded */
	s3eOpenIabResult m_Status;
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the OpenIab extension is available.
 */
s3eBool s3eOpenIabAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eOpenIabCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see s3eOpenIabUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eOpenIabCallback enum.
 */
s3eResult s3eOpenIabRegister(s3eOpenIabCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eOpenIabCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eOpenIabRegister
 */
s3eResult s3eOpenIabUnRegister(s3eOpenIabCallback cbid, s3eCallback fn);

/**
 * Explicitly initialise s3eOpenIab extension.
 * Use s3eOpenIabIsSupported() to check for completion as the startup is asynchronous.
 * @param base64PublicKey, is the base64 version of your public key. Note that this is the application's public key, not the
 *    developer public key that you use with Marmalade. You can find the application's base64 public key in the "Services & API" page for your application.
 *
 * TODO: add something about options, not base64 key
 */
void s3eOpenIabStart(s3eOpenIabOptions* options);

/**
 * Terminate s3eOpenIab extension.
 * Important, You should call this function when you're done as an open service connection could degrade the performance of the device.
 */
void s3eOpenIabStop();

/**
 * Checks for the availability of in-app billing with the Google Play application.
 * @return An s3eResult indicating the availability of in-app billing. Note, this will return false until you call s3eOpenIabStart
 */
s3eResult s3eOpenIabIsSupported();

/**
 * Initiates the purchase of an item given a product ID 
 * You need to register for the S3E_OPENIAB_PURCHASE_CALLBACK callback to determine the outcome of the purchase and award the purchase in your app. 
 * For consumable "inApp" goods you *MUST* also call s3eOpenIabConsumeItem. Until you do this the item will not be available for purchase again in the store and you will get S3E_OPENIAB_RESULT_ITEM_ALREADY_OWNED
 * Note, for additional security use the purchase developerPayload but make sure it's unique to the purchase and not dependent on the device.
 * Associated callback S3E_OPENIAB_PURCHASE_CALLBACK
 * @param purchaseID [UTF-8 encoded] item ID to be purchased.
 * @param developerPayLoad [UTF-8 encoded] additional arguments that you want Google Play to send back along with the purchase information [Optional]
 * @param inApp - You can set up either "in app" type purchases or "subscription" based purchases. in app type purchases are consumable, subscription type purchases are not.
 * @return void - the purchase query is asynchronous, use the callback to receive the response.
 */
void s3eOpenIabRequestPurchase(const char* productID, bool inApp, const char* developerPayLoad S3E_DEFAULT(0));

/**
 * Returns details about items available for purchase.
 * Unfortunately it is not possible to blindly enumerate available items so you need to pass two lists of known product IDs, one for "inApp" items and one for "subscription" items, either list could be empty (or null).
 * You need to register for the S3E_OPENIAB_LIST_PRODUCTS_CALLBACK to receive the response.
 * @param inAppProducts - an array of your const char* "inApp" product Ids (skus).
 * @param numInAppProducts - the number of product Ids in the "inApp" array.
 * @param subProducts - an array of your const char* "Subscription" product Ids (skus).
 * @param numSubProducts - the number of product Ids in the "Subscription" array.
 * @return void - the request is asynchronous, use the callback to receive the response.
 */
void s3eOpenIabRequestProductInformation(const char** inAppProducts,int numInAppProducts, const char** subProducts, int numSubProducts);

/**
 * Query for purchased items.
 * This method returns the current un-consumed products owned by the user.
 * You need to register for the S3E_OPENIAB_RESTORE_CALLBACK to receive the response
 * The Google Play service returns only the purchases made by the user account that is currently logged in to the device.
 * @return void - the query is asynchronous, use the callback to receive the response.
 */
void s3eOpenIabRestoreTransactions();

/**
 * Consumes the purchase of the given "in app" (consumable) item such as coins. 
 * Note, this consumes the entire purchase, the Store is not responsible for tracking the individual coins.
 * Important, Until you call this function the item will not be available for purchase in the store again.
 * Google recommend your flow is to Consume the item and check the Consume callback response before awarding the goods to the user. 
 * It is also good practise to invoke 3eOpenIabRestoreTransactions at discrete points in your app and check for consumable items that you may have missed. 
 * Associated callback S3E_OPENIAB_CONSUME_CALLBACK.
 * @param purchaseToken - The m_PurchaseToken of the order you are consuming.
 * @return void - the request is asynchronous, use the callback to receive the response.
 */
void s3eOpenIabConsumeItem(const char* purchaseToken);

/**
 * Get names of the stores to use in the Options
*/
s3eOpenIabStoreNames* s3eOpenIabGetStoreNames();

void s3eOpenIabMapSku(const char* sku, const char* storeName, const char* storeSku);

bool s3eOpenIabIsDebugLog();

void s3eOpenIabEnableDebugLogging(bool enabled);

void s3eOpenIabEnableDebugTagLogging(bool enabled, const char* tag);

S3E_END_C_DECL

/** @} */

#endif /* !S3E_EXT_OPENIAB_H */
