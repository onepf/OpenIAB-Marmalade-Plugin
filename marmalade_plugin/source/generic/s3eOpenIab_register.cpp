/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eOpenIab_autodefs.h"
#include "s3eEdk.h"
#include "s3eOpenIab.h"
//Declarations of Init and Term functions
extern s3eResult s3eOpenIabInit();
extern void s3eOpenIabTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eOpenIabStart_wrap(s3eOpenIabOptions* options)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab func on main thread: s3eOpenIabStart"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eOpenIabStart, 1, options);
}

static void s3eOpenIabRequestPurchase_wrap(const char* productID, bool inApp, const char* developerPayLoad)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab func on main thread: s3eOpenIabRequestPurchase"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eOpenIabRequestPurchase, 3, productID, inApp, developerPayLoad);
}

static void s3eOpenIabRequestProductInformation_wrap(const char** inAppProducts, int numInAppProducts, const char** subProducts, int numSubProducts)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab func on main thread: s3eOpenIabRequestProductInformation"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eOpenIabRequestProductInformation, 4, inAppProducts, numInAppProducts, subProducts, numSubProducts);
}

static void s3eOpenIabRestoreTransactions_wrap()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab func on main thread: s3eOpenIabRestoreTransactions"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eOpenIabRestoreTransactions, 0);
}

static void s3eOpenIabConsumeItem_wrap(const char* purchaseToken)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab func on main thread: s3eOpenIabConsumeItem"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eOpenIabConsumeItem, 1, purchaseToken);
}

#define s3eOpenIabStart s3eOpenIabStart_wrap
#define s3eOpenIabRequestPurchase s3eOpenIabRequestPurchase_wrap
#define s3eOpenIabRequestProductInformation s3eOpenIabRequestProductInformation_wrap
#define s3eOpenIabRestoreTransactions s3eOpenIabRestoreTransactions_wrap
#define s3eOpenIabConsumeItem s3eOpenIabConsumeItem_wrap

#endif

s3eResult s3eOpenIabRegister(s3eOpenIabCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_OPENIAB_HASH, S3E_OPENIAB_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eOpenIabUnRegister(s3eOpenIabCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_OPENIAB_HASH, S3E_OPENIAB_CALLBACK_MAX, cbid, fn);
}

void s3eOpenIabRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[14];
    funcPtrs[0] = (void*)s3eOpenIabRegister;
    funcPtrs[1] = (void*)s3eOpenIabUnRegister;
    funcPtrs[2] = (void*)s3eOpenIabStart;
    funcPtrs[3] = (void*)s3eOpenIabStop;
    funcPtrs[4] = (void*)s3eOpenIabIsSupported;
    funcPtrs[5] = (void*)s3eOpenIabRequestPurchase;
    funcPtrs[6] = (void*)s3eOpenIabRequestProductInformation;
    funcPtrs[7] = (void*)s3eOpenIabRestoreTransactions;
    funcPtrs[8] = (void*)s3eOpenIabConsumeItem;
    funcPtrs[9] = (void*)s3eOpenIabGetStoreNames;
    funcPtrs[10] = (void*)s3eOpenIabMapSku;
    funcPtrs[11] = (void*)s3eOpenIabIsDebugLog;
    funcPtrs[12] = (void*)s3eOpenIabEnableDebugLogging;
    funcPtrs[13] = (void*)s3eOpenIabEnableDebugTagLogging;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[14] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eOpenIab", funcPtrs, sizeof(funcPtrs), flags, s3eOpenIabInit, s3eOpenIabTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eOpenIabStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eOpenIabRegisterExt;
    return 0;
}

int g_s3eOpenIabVal = s3eOpenIabStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eOpenIabRegisterExt();
}
#endif

#endif
