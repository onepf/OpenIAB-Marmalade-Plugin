/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eOpenIab.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eOpenIabRegister_t)(s3eOpenIabCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eOpenIabUnRegister_t)(s3eOpenIabCallback cbid, s3eCallback fn);
typedef       void(*s3eOpenIabStart_t)(s3eOpenIabOptions* options);
typedef       void(*s3eOpenIabStop_t)();
typedef  s3eResult(*s3eOpenIabIsSupported_t)();
typedef       void(*s3eOpenIabRequestPurchase_t)(const char* productID, bool inApp, const char* developerPayLoad);
typedef       void(*s3eOpenIabRequestProductInformation_t)(const char** inAppProducts, int numInAppProducts, const char** subProducts, int numSubProducts);
typedef       void(*s3eOpenIabRestoreTransactions_t)();
typedef       void(*s3eOpenIabConsumeItem_t)(const char* purchaseToken);
typedef s3eOpenIabStoreNames*(*s3eOpenIabGetStoreNames_t)();
typedef       void(*s3eOpenIabMapSku_t)(const char* sku, const char* storeName, const char* storeSku);
typedef       bool(*s3eOpenIabIsDebugLog_t)();
typedef       void(*s3eOpenIabEnableDebugLogging_t)(bool enabled);
typedef       void(*s3eOpenIabEnableDebugTagLogging_t)(bool enabled, const char* tag);

/**
 * struct that gets filled in by s3eOpenIabRegister
 */
typedef struct s3eOpenIabFuncs
{
    s3eOpenIabRegister_t m_s3eOpenIabRegister;
    s3eOpenIabUnRegister_t m_s3eOpenIabUnRegister;
    s3eOpenIabStart_t m_s3eOpenIabStart;
    s3eOpenIabStop_t m_s3eOpenIabStop;
    s3eOpenIabIsSupported_t m_s3eOpenIabIsSupported;
    s3eOpenIabRequestPurchase_t m_s3eOpenIabRequestPurchase;
    s3eOpenIabRequestProductInformation_t m_s3eOpenIabRequestProductInformation;
    s3eOpenIabRestoreTransactions_t m_s3eOpenIabRestoreTransactions;
    s3eOpenIabConsumeItem_t m_s3eOpenIabConsumeItem;
    s3eOpenIabGetStoreNames_t m_s3eOpenIabGetStoreNames;
    s3eOpenIabMapSku_t m_s3eOpenIabMapSku;
    s3eOpenIabIsDebugLog_t m_s3eOpenIabIsDebugLog;
    s3eOpenIabEnableDebugLogging_t m_s3eOpenIabEnableDebugLogging;
    s3eOpenIabEnableDebugTagLogging_t m_s3eOpenIabEnableDebugTagLogging;
} s3eOpenIabFuncs;

static s3eOpenIabFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xde54774e, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eOpenIab");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xde54774e, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eOpenIabAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eOpenIabRegister(s3eOpenIabCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[0] func: s3eOpenIabRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eOpenIabRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eOpenIabUnRegister(s3eOpenIabCallback cbid, s3eCallback fn)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[1] func: s3eOpenIabUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eOpenIabUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eOpenIabStart(s3eOpenIabOptions* options)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[2] func: s3eOpenIabStart"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabStart(options);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eOpenIabStop()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[3] func: s3eOpenIabStop"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabStop();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eResult s3eOpenIabIsSupported()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[4] func: s3eOpenIabIsSupported"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eOpenIabIsSupported();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eOpenIabRequestPurchase(const char* productID, bool inApp, const char* developerPayLoad)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[5] func: s3eOpenIabRequestPurchase"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabRequestPurchase(productID, inApp, developerPayLoad);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eOpenIabRequestProductInformation(const char** inAppProducts, int numInAppProducts, const char** subProducts, int numSubProducts)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[6] func: s3eOpenIabRequestProductInformation"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabRequestProductInformation(inAppProducts, numInAppProducts, subProducts, numSubProducts);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eOpenIabRestoreTransactions()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[7] func: s3eOpenIabRestoreTransactions"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabRestoreTransactions();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eOpenIabConsumeItem(const char* purchaseToken)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[8] func: s3eOpenIabConsumeItem"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabConsumeItem(purchaseToken);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eOpenIabStoreNames* s3eOpenIabGetStoreNames()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[9] func: s3eOpenIabGetStoreNames"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eOpenIabStoreNames* ret = g_Ext.m_s3eOpenIabGetStoreNames();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eOpenIabMapSku(const char* sku, const char* storeName, const char* storeSku)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[10] func: s3eOpenIabMapSku"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabMapSku(sku, storeName, storeSku);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

bool s3eOpenIabIsDebugLog()
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[11] func: s3eOpenIabIsDebugLog"));

    if (!_extLoad())
        return true;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_s3eOpenIabIsDebugLog();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eOpenIabEnableDebugLogging(bool enabled)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[12] func: s3eOpenIabEnableDebugLogging"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabEnableDebugLogging(enabled);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eOpenIabEnableDebugTagLogging(bool enabled, const char* tag)
{
    IwTrace(OPENIAB_VERBOSE, ("calling s3eOpenIab[13] func: s3eOpenIabEnableDebugTagLogging"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eOpenIabEnableDebugTagLogging(enabled, tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
